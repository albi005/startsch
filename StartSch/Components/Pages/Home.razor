@page "/"
@inject Db Db

@{
    DateTime utcNow = DateTime.UtcNow;
}

<PageTitle>StartSCH</PageTitle>

<aside style="float: right; max-width: min(400px, 25%)">
    <h2>Nyitások</h2>
    @foreach (var opening in _openings)
    {
        <article style="margin-bottom: 32px">
            <h3 style="margin: 0 0 12px 0">
                @opening.Title
            </h3>
            <div style="margin-bottom: 12px">
                @foreach (var group in opening.Groups)
                {
                    <span class="tag">
                        @group.PincerName
                    </span>
                }
            </div>

            @if (opening.StartUtc < utcNow)
            {
                <span style="font-weight: bold; color: var(--md-sys-color-tertiary)">
                    @Utils.FormatDateRange(opening.StartUtc, opening.EndUtc)
                </span>
            }
            else
            {
                @Utils.FormatDateRange(opening.StartUtc, opening.EndUtc)
            }
        </article>
    }
    @if (!_openings.Any())
    {
        <p>
            <small>
                Nincs bejelentett nyitás.
            </small>
        </p>
    }

    <div style="margin-top: 16px">
        <a href="/openings">
            Korábbi nyitások
        </a>
    </div>

    <hr/>

    <h2 style="font-size: medium">
        StartSCH
    </h2>
    <ul>
        <li>
            <a href="https://github.com/albi005/StartSch">Forráskód</a>
        </li>
        <li>
            <a href="https://github.com/albi005/StartSch/issues">Hibajelentés</a>
        </li>
        <li>
            <a href="https://github.com/albi005/StartSch/issues">Ötletek</a>
        </li>
        <li>
            <a href="https://github.com/albi005/StartSch/discussions">Kérdések</a>
        </li>
    </ul>
</aside>

<main>
    <h1>StartSCH</h1>
    <h2>Hírek</h2>
    @foreach (var post in _posts)
    {
        <div style="margin-bottom: 12px">
            <PostPreview Post="post" />
        </div>
    }
    <div style="height: 64px"></div>
    <LogInOrOut/>
    <UserClaims/>
</main>

@code {
    private IEnumerable<Opening> _openings = [];
    private IEnumerable<Post> _posts = [];

    protected override async Task OnInitializedAsync()
    {
        _openings = await Db.Openings
            .Where(o => o.EndUtc == null)
            .OrderBy(o => o.StartUtc)
            .Include(o => o.Groups)
            .AsNoTrackingWithIdentityResolution()
            .ToListAsync();
        _posts = await Db.Posts
            .Where(p => p.PublishedUtc.HasValue)
            .OrderByDescending(p => p.PublishedUtc)
            .Include(p => p.Groups)
            .Include(p => p.Event)
            .AsNoTrackingWithIdentityResolution()
            .ToListAsync();
    }

}